name: Flutter Release

on:
  push:
    tags:
      - 'v*.*.*-alpha*'  # Match alpha version tags, e.g., v1.0.0-alpha, v1.0.0-alpha.1
      - 'v*.*.*'         # Match major version tags, e.g., v1.0.0
  pull_request:
    branches:
      - main             # Trigger on PRs merged into the main branch

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        channel: stable
        flutter-version: 3.22.2
    - run: flutter --version

    - name: Install dependencies
      run: flutter pub get

    - name: Build APK
      run: flutter build apk --release

    - name: Build App Bundle
      run: flutter build appbundle --release

    - name: Upload release APK
      uses: actions/upload-artifact@v4
      with:
        name: app-release-apk
        path: build/app/outputs/flutter-apk/app-release.apk

    - name: Upload release AAB
      uses: actions/upload-artifact@v4
      with:
        name: app-release-aab
        path: build/app/outputs/bundle/release/app-release.aab

    - name: Generate Release Notes
      id: generate_release_notes
      uses: actions/github-script@v7
      with:
        script: |
          const { generateReleaseNotes } = require('@actions/github/lib/utils');
          const releaseNotes = await generateReleaseNotes({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag_name: context.payload.ref.replace('refs/tags/', ''),
            previous_tag_name: context.payload.before ? context.payload.before : '',
          });
          return releaseNotes.body;

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body: ${{ steps.generate_release_notes.outputs.result }}
        draft: false
        prerelease: ${{ contains(github.ref_name, '-alpha') }}

    - name: Upload APK to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: build/app/outputs/flutter-apk/app-release.apk
        asset_name: app-release.apk
        asset_content_type: application/vnd.android.package-archive

    - name: Upload AAB to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: build/app/outputs/bundle/release/app-release.aab
        asset_name: app-release.aab
        asset_content_type: application/octet-stream
